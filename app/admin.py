import asyncio
import logging
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramRetryAfter, TelegramForbiddenError
from aiogram.filters import CommandStart, Command, Filter, StateFilter, or_f
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, InputMediaPhoto

import app.keyboards as kb
from app.database.requests import get_users, set_item, set_category, get_item_by_id, update_item, delete_item,\
    set_image,delete_category_by_id,get_category_by_id, update_category, delete_photo_by_name, get_all_photos

admin = Router()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class Newsletter(StatesGroup):
    message = State()

admin_commands = '–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/newsletter - –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞\n/add_item - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n\
/add_category - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n/del_category - –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n/add_photo - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –º–µ–Ω—é\n'


class AddItem(StatesGroup):
    name = State()
    category = State()
    description = State()
    photo = State()
    price = State()

    item_for_change = None

    texts = {
        'AddItem:name': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ',
        'AddItem:category': '–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ',
        'AddItem:description': '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ',
        'AddItem:photo': '–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ',
        'AddItem:price': '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–Ω–æ–≤–æ'

    }
class AddCategory(StatesGroup):
    name = State()
    category_for_change = None

class AddImage(StatesGroup):
    name = State()
    description = State()
    image = State()
class DeleteImage(StatesGroup):
    name=State()
class DeleteCategory(StatesGroup):
    id = State()

class AdminProtect(Filter):
    async def __call__(self, message: Message):
        return message.from_user.id in [1190185138]


@admin.message(AdminProtect(),Command('apanel'))
async def apanel(message: Message):
    await message.answer(admin_commands, reply_markup=kb.admin_kb)

@admin.message(AdminProtect(),Command('newsletter'))
@admin.message(AdminProtect(), F.text == '–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
async def newsletter(message: Message, state: FSMContext):
    await state.set_state(Newsletter.message)
    await message.answer('–û—Ç–ø—Ä–∞–≤—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ \
                        —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞')

@admin.message(AdminProtect(), Newsletter.message)
async def newsletter_message(message: Message, state: FSMContext):
    await message.answer('üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...')
    
    users = await get_users()
    users_list = list(users)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ScalarResult –≤ —Å–ø–∏—Å–æ–∫
    total_users = len(users_list)
    success_count = 0
    blocked_count = 0
    error_count = 0
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á–∞–º–∏ –ø–æ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    batch_size = 20
    
    for i in range(0, total_users, batch_size):
        batch = users_list[i:i + batch_size]
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        tasks = []
        for user in batch:
            task = send_to_user(message, user.tg_id)
            tasks.append(task)
        
        # –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ –±–∞—Ç—á–µ
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in results:
            if result == "success":
                success_count += 1
            elif result == "blocked":
                blocked_count += 1
            else:
                error_count += 1
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
        if i + batch_size < total_users:
            await asyncio.sleep(1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (i + batch_size) % 100 == 0 or i + batch_size >= total_users:
            current = min(i + batch_size, total_users)
            await message.answer(
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {current}/{total_users}\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏: {blocked_count}\n"
                f"‚ùå –û—à–∏–±–∫–∏: {error_count}"
            )
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {blocked_count}\n"
        f"‚ùå –û—à–∏–±–∫–∏: {error_count}\n"
        f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_count/total_users*100:.1f}%"
    )
    
    await state.clear()


async def send_to_user(message: Message, user_id: int) -> str:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        await message.send_copy(chat_id=user_id)
        return "success"
        
    except TelegramForbiddenError:
        logger.info(f"User {user_id} blocked the bot")
        return "blocked"
        
    except TelegramRetryAfter as e:
        # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –∂–¥–µ–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
        logger.warning(f"Rate limit hit, waiting {e.retry_after} seconds")
        await asyncio.sleep(e.retry_after)
        try:
            await message.send_copy(chat_id=user_id)
            return "success"
        except:
            return "error"
            
    except Exception as e:
        logger.error(f"Error sending to user {user_id}: {e}")
        return "error"
    

@admin.message(AdminProtect(),F.text=='–ó–∞–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–º–µ–Ω—é ‚ùå')
async def close_menu(message: Message):
    await message.answer(f'<b>–ê–¥–º–∏–Ω-–º–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ!</b>\n\n–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', \
                        reply_markup=ReplyKeyboardRemove(), parse_mode='HTML')

@admin.callback_query(AdminProtect(), F.data.startswith('itemdelete_'), StateFilter(None))
async def del_item(callback: CallbackQuery):
    item_id = callback.data.split('_')[1]
    await delete_item(int(item_id))
    await callback.answer('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!')
    await callback.message.delete()

@admin.callback_query(AdminProtect(), F.data.startswith('change_'), StateFilter(None))
async def change_item(callback: CallbackQuery, state: FSMContext):
    item_id = callback.data.split('_')[1]

    item_for_change = await get_item_by_id(item_id)

    AddItem.item_for_change = item_for_change
    await callback.answer()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AddItem.name)

@admin.message(AdminProtect(), F.text == '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', StateFilter(None))
@admin.message(AdminProtect(), Command('add_item'))
async def add_item(message: Message, state: FSMContext):
    await state.set_state(AddItem.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', reply_markup=kb.item_kb)

@admin.message(AdminProtect(),Command('cancel'), StateFilter('*'))
@admin.message(AdminProtect(),F.text=='–û—Ç–º–µ–Ω–∞ ‚ùå', StateFilter('*'))
async def cancel_handler(message: Message, state: FSMContext):
    current_state= state.get_state()
    if current_state is None:
        return
    state.clear()
    await message.answer(text=f'–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã', reply_markup=kb.admin_kb)

@admin.message(StateFilter('*'), Command("–Ω–∞–∑–∞–¥"), AdminProtect())
@admin.message(StateFilter('*'), F.text == "–ù–∞–∑–∞–¥ ‚óÄ", AdminProtect())
async def back_step_handler(message: Message, state: FSMContext) -> None:

    current_state = await state.get_state()

    if current_state == AddItem.name:
        await message.answer('–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')
        return

    previous = None
    for step in AddItem.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await message.answer(f"<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n{AddItem.texts[previous.state]}:", parse_mode='HTML')
            return
        previous = step


@admin.message(AdminProtect(), AddItem.name, or_f(F.text, F.text=='.'))
async def add_item_name(message: Message, state: FSMContext):
    if message.text == '.':
        await state.update_data(name=AddItem.item_for_change.name)
        await message.answer(text='–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–∂–Ω–∏–º')
    else:
        if len(message.text) > 50:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–Ω—å—à–µ 50 —Å–∏–º–≤–æ–ª–æ–≤!.\n–í–≤–µ–¥–∏ –∑–∞–Ω–æ–≤–æ')
            return
        await state.update_data(name=message.text)

    await state.set_state(AddItem.category)
    if not await kb.categories():
        await message.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞, –∑–∞—Ç–µ–º –∫–æ–º–∞–Ω–¥—É /add_category –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
        return
    await message.answer(f'–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=await kb.categories(False))



@admin.callback_query(AdminProtect(), AddItem.category, or_f(F.data, F.text=='.'))
async def add_item_category(callback: CallbackQuery, state: FSMContext):
    if callback.message.text == '.':
        await state.update_data(category=AddItem.item_for_change.category)
        await callback.message.answer(text='–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Å—Ç–∞–ª–∞—Å—å –ø—Ä–µ–∂–Ω–µ–π')
    else:
        await state.update_data(category=int(callback.data.split('_')[1]))
    await state.set_state(AddItem.description)
    await callback.answer('')
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')


@admin.message(AdminProtect(), AddItem.description, or_f(F.text, F.text=='.'))
async def add_item_description(message: Message, state: FSMContext):
    if message.text == '.':
        await state.update_data(description=AddItem.item_for_change.description)
        await message.answer(text='–û–ø–∏—Å–∞–Ω–∏–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–∂–Ω–∏–º')
    else:
        if len(message.text) > 200:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–Ω—å—à–µ 200 —Å–∏–º–≤–æ–ª–æ–≤!.\n–í–≤–µ–¥–∏ –∑–∞–Ω–æ–≤–æ')
            return
        await state.update_data(description=message.text)

    await state.update_data(description=message.text)
    await state.set_state(AddItem.photo)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞')


@admin.message(AdminProtect(), AddItem.photo, or_f(F.photo, F.text=='.'))
async def add_item_photo(message: Message, state: FSMContext):
    if message.text == '.':
        await state.update_data(photo=AddItem.item_for_change.photo)
        await message.answer('–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–∂–Ω–∏–º.')
    else:
        await state.update_data(photo=message.photo[-1].file_id)
    await state.set_state(AddItem.price)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞')


@admin.message(AdminProtect(), AddItem.price, or_f(F.text, F.text=='.'))
async def add_item_price(message: Message, state: FSMContext):
    if message.text == '.':
        await state.update_data(price=AddItem.item_for_change.price)
        await message.answer('–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –æ—Å—Ç–∞–ª–∞—Å—å –ø—Ä–µ–∂–Ω–µ–π.')
    else:
        await state.update_data(price=float(message.text))
    data = await state.get_data()
    try:
        if AddItem.item_for_change:
            await update_item(AddItem.item_for_change.id, data)
            addition = '–∏–∑–º–µ–Ω—ë–Ω'
        else:
            await set_item(data)
            addition = '–¥–æ–±–∞–≤–ª–µ–Ω'
        await message.answer(f'–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ {addition}', reply_markup=kb.admin_kb)
        await state.clear()
    except Exception as e:
        await message.answer(
            f'–û—à–∏–±–∫–∞: {str(e)}\n–û–±—Ä–∞—Ç–∏—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É, –æ–Ω –æ–ø—è—Ç—å –¥–µ–Ω–µ–≥ —Ö–æ—á–µ—Ç', reply_markup=kb.admin_kb
        )
        await state.clear()
    AddItem.item_for_change = None

@admin.callback_query(AdminProtect(), F.data.startswith('categorychange_'))
async def cahnge_category(callback: CallbackQuery, state: FSMContext):
    category_id = callback.data.split('_')[1]

    category_for_change = await get_category_by_id(int(category_id))

    AddCategory.category_for_change = category_for_change

    await callback.answer()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",reply_markup=kb.item_kb
    )
    await state.set_state(AddCategory.name)

@admin.message(AdminProtect(), F.text == '–î–æ–±–∞–≤–∏—Ç—å –ö–∞—Ç–µ–≥–æ—Ä–∏—é')
@admin.message(AdminProtect(), Command('add_category'))
async def add_category(message: Message, state: FSMContext):
    await state.set_state(AddCategory.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=kb.item_kb)

@admin.message(AdminProtect(), AddCategory.name)
async def add_category_to_db(message: Message, state: FSMContext):
    await state.update_data(name=str(message.text))
    data = await state.get_data()
    if AddCategory.category_for_change:
        await update_category(AddCategory.category_for_change.id,data['name'])
        addition = '–∏–∑–º–µ–Ω–µ–Ω–∞'
    else:
        addition = '–¥–æ–±–∞–≤–ª–µ–Ω–∞'
        await set_category(data['name'])
    await message.answer(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ {addition}', reply_markup=ReplyKeyboardRemove())
    await state.clear()

@admin.message(AdminProtect(), F.text == '–£–¥–∞–ª–∏—Ç—å –ö–∞—Ç–µ–≥–æ—Ä–∏—é', StateFilter(None))
@admin.message(AdminProtect(), Command('del_category'))
async def delete_category(message: Message, state: FSMContext):
    await state.set_state(DeleteCategory.id)
    await message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞', reply_markup=await kb.categories(False))

@admin.callback_query(AdminProtect(), DeleteCategory.id, F.data)
async def delete_catgory_finish(callback: CallbackQuery, state: FSMContext):
    await state.update_data(id=int(callback.data.split('_')[1]))
    data = await state.get_data()
    await delete_category_by_id(data['id'])
    await callback.message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=ReplyKeyboardRemove())
    await state.clear()


@admin.message(AdminProtect(), Command('add_photo'))
async def add_photo_name(message: Message, state: FSMContext):
    await state.set_state(AddImage.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ <strong>(–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ)</strong>', parse_mode='HTML')

@admin.message(AdminProtect(), AddImage.name, F.text)
async def add_photo_description(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AddImage.description)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è(–û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–¥ –∫–∞—Ä—Ç–∏–Ω–∫–æ–π)')

@admin.message(AdminProtect(), AddImage.description, F.text)
async def add_photo_image(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AddImage.image)
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –∫–∞—Ä—Ç–∏–∫—É')

@admin.message(AdminProtect(),AddImage.image, F.photo)
async def add_photo_data(message: Message, state: FSMContext):
    img = message.photo[-1].file_id
    await state.update_data(image=img)
    data = await state.get_data()
    await set_image(data)
    await message.answer(f'–ö–∞—Ä—Ç–∏–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã –≤—ã–π—Ç–∏\n')
    await state.clear()


@admin.message(AdminProtect(), Command('del_photo'))
async def del_photo(message: Message, state: FSMContext):
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–æ—Ç–æ')
    await state.set_state(DeleteImage.name)

@admin.message(AdminProtect(), Command('get_photos'))
async def get_photos(message: Message, state: FSMContext):
    photos = await get_all_photos()
    media = []
    for photo in photos:
        media.append(InputMediaPhoto(media=photo.image, caption=photo.name))
    await message.answer_media_group(media=media)


@admin.message(AdminProtect(), DeleteImage.name)
async def delete_photo(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    data = await state.get_data()
    await delete_photo_by_name(data['name'])
    await message.answer('–ö–∞—Ä—Ç–∏–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!')
    await state.clear()

@admin.message(AdminProtect(),Command('photo_url'), F.photo)
async def add_photo(message: Message):
    photo= message.photo[-1].file_id
    await message.answer(text=photo)
