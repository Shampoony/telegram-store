from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

import app.keyboards as kb
from app.database.requests import get_item_by_id, set_user, set_basket, get_user_by_id, get_basket, delete_basket, get_banner, get_category_by_id,update_category
from app.admin import AdminProtect


router = Router()

@router.message(CommandStart())
@router.callback_query(F.data.startswith('main'))
async def cmd_start(message: Message):
    banner = await get_banner('main')
    media = InputMediaPhoto(media=banner.image, caption=banner.description)
    if isinstance(message, Message):
        await set_user(message.from_user.id)
        await message.answer_photo(photo=banner.image, caption=banner.description,
                            reply_markup=await kb.main_menu())
    else:
        if len(message.data.split('_')) > 1:
            await message.message.edit_media(media,
                                reply_markup=await kb.main_menu())
            
        else:
            await message.message.edit_media(media,
                                reply_markup=await kb.main_menu())


@router.callback_query(F.data.startswith('catalog'))
async def catalog(callback: CallbackQuery):
    banner = InputMediaPhoto(media=(await get_banner('catalog')).image, caption=(await get_banner('catalog')).description)
    markup = await kb.categories(1)
    await callback.answer('')
    await callback.message.edit_media(banner, reply_markup=markup)
    
@router.callback_query(F.data=='contacts')
async def catalog(callback: CallbackQuery):
    await callback.answer('')
    media = InputMediaPhoto(media=(await get_banner('contacts')).image, caption='<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b>\n\n–î–ª—è –Ω–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π\
                                    –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω –¥–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–ø–æ–∫–æ–π–Ω–æ\
                                    –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞–º —Å –≤–∞—à–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏\n–ê–¥–º–∏–Ω - @Cheebupelka\n–ü—Ä–æ—Å—Ç–æ –∫—Ä—É—Ç–æ–π —á–µ–ª–∏–∫ - @OdoFlamingo135',\
                                    parse_mode='HTML')
    await callback.message.edit_media(media, reply_markup=kb.to_back)
    
@router.callback_query(F.data=='prof')
async def profile(callback: CallbackQuery):
    items = await get_basket(callback.from_user.id)
    kol = 0
    for item in items:
        kol += 1
    message_text = f'<b>üë§ Username: {callback.from_user.first_name}</b>\n\n'
    if AdminProtect():
        message_text += 'üü¢ <b>–°—Ç–∞—Ç—É—Å</b>: –ê–¥–º–∏–Ω'
    else:
        message_text += 'üü¢ <b>–°—Ç–∞—Ç—É—Å</b> –ö–ª–∏–µ–Ω—Ç'
    message_text += f'\n\n\n<b>üîê –¢–µ–ª–µ–≥—Ä–∞–º ID: {callback.from_user.id}\n\n</b><b>üíå  –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:</b> –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞\n\n\
<b>üõí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ:</b> {kol}\n\n'
    media = InputMediaPhoto(media=(await get_banner('prof')).image, caption=message_text, parse_mode='HTML')
    await callback.answer('')
    await callback.message.edit_media(media, reply_markup=kb.to_back)

@router.callback_query(F.data.startswith('category_'))
async def category (callback: CallbackQuery):
    await callback.answer()
    category = await get_category_by_id(int(callback.data.split('_')[1]))
    banner = await get_banner(category.name.split(' ')[0])
    if not banner:
        banner = await get_banner('not_found')
        banner.description = ''
    media = InputMediaPhoto(media=banner.image, caption=banner.description)
    if not (await kb.items(int(callback.data.split('_')[1]))):
        media = InputMediaPhoto(media=banner.image, caption='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤...')
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data=f'catalog'))
        await callback.message.edit_media(media, reply_markup=keyboard.adjust(2).as_markup())
        return
    await callback.message.edit_media(media, 
                                    reply_markup=await kb.items(int(callback.data.split('_')[1]), AdminProtect()))


@router.callback_query(F.data.startswith('item_'))
async def category (callback: CallbackQuery):
    item = await get_item_by_id(int(callback.data.split('_')[1]))
    media = InputMediaPhoto(media=item.photo, caption=f'<b>{item.name}</b>\n\n{item.description}\n\n<b>C—Ç–æ–∏–º–æ—Å—Ç—å: {round(item.price)}‚ÇΩ</b>', parse_mode='HTML')
    await callback.answer('')
    await callback.message.edit_media(media\
                                        ,reply_markup=await kb.basket(item.id, AdminProtect(), item.category))

@router.callback_query(F.data.startswith('basket_item_'))
async def onlymybasket(callback: CallbackQuery):
    item = await get_item_by_id(callback.data.split('_')[2])
    media = InputMediaPhoto(media=item.photo, caption=f'<b>{item.name}</b>\n\n<b>{item.description}</b>\n\n<b>C—Ç–æ–∏–º–æ—Å—Ç—å: {round(item.price)}‚ÇΩ</b>', parse_mode='HTML')
    await callback.message.edit_media(media\
                                        ,reply_markup=await kb.onlymybasket(order_id=item.id))

@router.callback_query(F.data.startswith('buy_'))
async def buy_item(callback: CallbackQuery):
    item = await get_item_by_id(callback.data.split('_')[-1])
    await callback.message.answer(text='–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –∑–∞ –ø–æ–∫—É–ø–∫—É! –°–≤—è–∂–∏—Å—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –Ω–∞–ø—Ä—è–º—É—é.\
                                –î–∞–Ω–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü –ø—Ä–æ–≤–µ—Ä–µ–Ω –º–Ω–æ–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏,\
                                –≤ —á—ë–º —Ç—ã –º–æ–∂–µ—à—å —É–±–µ–¥–∏—Ç—å—Å—è –ø–æ –æ—Ç–∑—ã–≤–∞–º –≤ –Ω–∞—â–µ–º –∫–∞–Ω–∞–ª–µ.')

@router.callback_query(F.data.startswith('order_'))
async def basket(callback: CallbackQuery):
    await set_basket(callback.from_user.id, int(callback.data.split('_')[1]))
    await callback.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')

@router.callback_query(F.data == 'mybasket')
async def mybasket(callback: CallbackQuery):
    await callback.answer('')
    items = await get_basket(callback.from_user.id)
    keyboard = []
    for item in items:
        prod = await get_item_by_id(item.item)
        keyboard.append([InlineKeyboardButton(text=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {prod.name} –¶–µ–Ω–∞: {round(prod.price)}‚ÇΩ', callback_data=f'basket_item_{item.item}')])
    keyboard.append([InlineKeyboardButton(text=f'‚¨Ö –ù–∞–∑–∞–¥', callback_data=f'main')])
    banner = await get_banner('cart')
    media = InputMediaPhoto(media=banner.image, caption=banner.description)
    if len(keyboard) == 0:
        media = InputMediaPhoto(media=banner.image, caption='–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.')
        await callback.message.edit_media(media)
    else:
        await callback.message.edit_media(media, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

@router.callback_query(F.data.startswith('delete_'))
async def delete_from_basket(callback: CallbackQuery):
    await delete_basket(callback.from_user.id, int(callback.data.split('_')[1]))
    await callback.message.delete()
    await callback.answer('–í—ã —É–¥–∞–ª–∏–ª–∏ —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã')
@router.callback_query(F.data == 'channel')
async def channel(callback: CallbackQuery):
    await callback.answer('–ö–∞–Ω–∞–ª –≤—Å—ë –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.')

#@router.callback_query(F.data.startswith('back_'))
#async def back(callback: CallbackQuery):
#    level = int(callback.data.split('_')[1], 'main')
#    await get_menu_content(level-1)