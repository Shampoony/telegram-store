from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart, Command

import app.keyboards as kb
from app.database.requests import get_item_by_id, set_user, set_basket, get_user_by_id, get_basket, delete_basket
from app.admin import AdminProtect


router = Router()

@router.message(CommandStart())
@router.callback_query(F.data.startswith('to_main'))
async def cmd_start(message: Message):
    if isinstance(message, Message):
        await set_user(message.from_user.id)
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω!",
                            reply_markup=await kb.main_menu())
    else:
        if len(message.data.split('_')) > 2:
            await message.message.edit_text(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω!",
                                reply_markup=await kb.main_menu())
        else:
            await message.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω!",
                                        reply_markup=await kb.main_menu())


@router.callback_query(F.data=='catalog')
async def catalog(callback: CallbackQuery):
    markup = await kb.categories()
    await callback.answer('')
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.', reply_markup=markup)
    
@router.callback_query(F.data=='contacts')
async def catalog(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text(text='<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b>\n\n–î–ª—è –Ω–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω –¥–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–ø–æ–∫–æ–π–Ω–æ\
                                    –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞–º —Å –≤–∞—à–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏\n–ê–¥–º–∏–Ω - @Cheebupelka\n–ü—Ä–æ—Å—Ç–æ –∫—Ä—É—Ç–æ–π —á–µ–ª–∏–∫ - @OdoFlamingo135',\
                                    parse_mode='HTML', reply_markup=kb.to_back)
    
@router.callback_query(F.data=='prof')
async def profile(callback: CallbackQuery):
    items = await get_basket(callback.from_user.id)
    kol = 0
    for item in items:
        kol += 1
    message_text = f'<b>üë§ Username: {callback.from_user.first_name}</b>\n\n'
    if AdminProtect():
        message_text += 'üü¢ <b>–°—Ç–∞—Ç—É—Å</b>: –ê–¥–º–∏–Ω'
    else:
        message_text += 'üü¢ <b>–°—Ç–∞—Ç—É—Å</b> –ö–ª–∏–µ–Ω—Ç'
    message_text += f'\n\n\n<b>üîê –¢–µ–ª–µ–≥—Ä–∞–º ID: {callback.from_user.id}\n\n</b><b>üíå  –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:</b> –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞\n\n\
<b>üõí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ:</b> {kol}\n\n'
    await callback.answer('')
    await callback.message.edit_text(text=message_text,\
                                    parse_mode='HTML', reply_markup=kb.to_back)

@router.callback_query(F.data.startswith('category_'))
async def category (callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text('–í—ã–±–µ—Ä–µ—Ç–µ —Ç–æ–≤–∞—Ä', 
                                    reply_markup=await kb.items(callback.data.split('_')[1]))


@router.callback_query(F.data.startswith('item_'))
async def category (callback: CallbackQuery):
    item = await get_item_by_id(int(callback.data.split('_')[1]))
    await callback.answer('')
    await callback.message.answer_photo(photo = item.photo, caption=f'{item.name}\n\n{item.description}\n\n–¶–µ–Ω–∞: {item.price} —Ä—É–±–ª–µ–π'\
                                        ,reply_markup=await kb.basket(item.id, AdminProtect()))

@router.callback_query(F.data.startswith('basket_item_'))
async def onlymybasket(callback: CallbackQuery):
    item = await get_item_by_id(callback.data.split('_')[2])
    await callback.message.answer_photo(photo = item.photo, caption=f'{item.name}\n\n{item.description}\n\n–¶–µ–Ω–∞: {item.price} —Ä—É–±–ª–µ–π'\
                                        ,reply_markup=await kb.onlymybasket(order_id=item.id))

@router.callback_query(F.data.startswith('order_'))
async def basket(callback: CallbackQuery):
    await set_basket(callback.from_user.id, callback.data.split('_')[1])
    await callback.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')

@router.callback_query(F.data == 'mybasket')
async def mybasket(callback: CallbackQuery):
    await callback.answer('')
    items = await get_basket(callback.from_user.id)
    keyboard = []
    for item in items:
        prod = await get_item_by_id(item.item)
        keyboard.append([InlineKeyboardButton(text=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {prod.name} –¶–µ–Ω–∞: {prod.price}‚ÇΩ', callback_data=f'basket_item_{item.item}')])
    if len(keyboard) == 0:
        await callback.message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.')
    else:
        await callback.message.answer(text=f'–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞,\n ', reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

@router.callback_query(F.data.startswith('delete_'))
async def delete_from_basket(callback: CallbackQuery):
    await delete_basket(callback.from_user.id, callback.data.split('_')[1])
    await callback.message.delete()
    await callback.answer('–í—ã —É–¥–∞–ª–∏–ª–∏ —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã')